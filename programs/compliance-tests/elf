# 1 "add-01.S"
# 1 "/home/mwojcik/riscv/compiler/tests//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "add-01.S"
# 19 "add-01.S"
# 1 "env/model_test.h" 1
# 20 "add-01.S" 2
# 1 "env/arch_test.h" 1
# 1 "env/encoding.h" 1
# 2 "env/arch_test.h" 2
# 30 "env/arch_test.h"
.macro RVTEST_CODE_BEGIN
  .align 5
  .section .text.init;
  .globl rvtest_init; rvtest_init:

     .option push;.option norvc;.align 5; li x1,(0xFEEDBEADFEEDBEAD & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x2,(0xFF76DF56FF76DF56 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x3,(0x7FBB6FAB7FBB6FAB & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x4,(0xBFDDB7D5BFDDB7D5 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; la x5,rvtest_code_begin;.align 5;.option pop;;
     .option push;.option norvc;.align 5; la x6,rvtest_data_begin;.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x7,(0xB7FBB6FAB7FBB6FA & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x8,(0x5BFDDB7D5BFDDB7D & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x9,(0xADFEEDBEADFEEDBE & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x10,(0x56FF76DF56FF76DF & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x11,(0xAB7FBB6FAB7FBB6F & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x12,(0xD5BFDDB7D5BFDDB7 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x13,(0xEADFEEDBEADFEEDB & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x14,(0xF56FF76DF56FF76D & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x15,(0xFAB7FBB6FAB7FBB6 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x16,(0x7D5BFDDB7D5BFDDB & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x17,(0xBEADFEEDBEADFEED & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x18,(0xDF56FF76DF56FF76 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x19,(0x6FAB7FBB6FAB7FBB & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x20,(0xB7D5BFDDB7D5BFDD & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x21,(0xDBEADFEEDBEADFEE & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x22,(0x6DF56FF76DF56FF7 & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x23,(0xB6FAB7FBB6FAB7FB & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x24,(0xDB7D5BFDDB7D5BFD & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x25,(0xEDBEADFEEDBEADFE & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x26,(0x76DF56FF76DF56FF & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x27,(0xBB6FAB7FBB6FAB7F & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x28,(0xDDB7D5BFDDB7D5BF & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x29,(0xEEDBEADFEEDBEADF & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x30,(0xF76DF56FF76DF56F & 0xFFFFFFFF);.align 5;.option pop;;
     .option push;.option norvc;.align 5; li x31,(0xFBB6FAB7FBB6FAB7 & 0xFFFFFFFF);.align 5;.option pop;;
  .globl rvtest_code_begin
  rvtest_code_begin:
.endm

.macro RVTEST_CODE_END
  .align 4;
  .global rvtest_code_end
  rvtest_code_end:
.endm

.macro RVTEST_DATA_BEGIN
    .data
    .align 4
    .global rvtest_data_begin
    rvtest_data_begin:
.endm

.macro RVTEST_DATA_END
    .global rvtest_data_end
    rvtest_data_end:
.endm
# 21 "add-01.S" 2


.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:

RVTEST_CODE_BEGIN



RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",add)

RVTEST_SIGBASE( x9,signature_x9_1)

inst_0:


TEST_RR_OP(add, x15, x22, x30, 0x2aaaaaa9, 0x7fffffff, -0x55555556, x9, 0, x10)

inst_1:


TEST_RR_OP(add, x8, x8, x25, 0x7ffffffd, -0x2, 0x7fffffff, x9, 4, x10)

inst_2:


TEST_RR_OP(add, x13, x7, x7, 0x66666668, 0x33333334, 0x33333334, x9, 8, x10)

inst_3:


TEST_RR_OP(add, x28, x24, x28, 0xdffffefe, -0x101, -0x20000001, x9, 12, x10)

inst_4:


TEST_RR_OP(add, x14, x14, x14, 0xfffffff8, -0x4, -0x4, x9, 16, x10)

inst_5:


TEST_RR_OP(add, x2, x16, x0, 0x80000000, -0x80000000, 0x0, x9, 20, x10)

inst_6:


TEST_RR_OP(add, x7, x13, x1, 0x1bffffff, 0x20000000, -0x4000001, x9, 24, x10)

inst_7:


TEST_RR_OP(add, x5, x31, x16, 0x64666666, 0x66666667, -0x2000001, x9, 28, x10)

inst_8:


TEST_RR_OP(add, x6, x11, x5, 0xfeffffbe, -0x41, -0x1000001, x9, 32, x10)

inst_9:


TEST_RR_OP(add, x17, x3, x4, 0xff7fffee, -0x11, -0x800001, x9, 36, x10)

inst_10:


TEST_RR_OP(add, x29, x15, x11, 0xfdbffffe, -0x2000001, -0x400001, x9, 40, x10)

inst_11:


TEST_RR_OP(add, x3, x23, x2, 0xfedffffe, -0x1000001, -0x200001, x9, 44, x10)

inst_12:


TEST_RR_OP(add, x12, x20, x18, 0xffefffff, 0x0, -0x100001, x9, 48, x10)

inst_13:


TEST_RR_OP(add, x26, x17, x21, 0x3ff7fffe, 0x3fffffff, -0x80001, x9, 52, x10)

inst_14:


TEST_RR_OP(add, x1, x6, x15, 0xfffc001f, 0x20, -0x40001, x9, 56, x5)

inst_15:


TEST_RR_OP(add, x10, x18, x24, 0xfffe0005, 0x6, -0x20001, x9, 60, x5)
RVTEST_SIGBASE( x7,signature_x7_0)

inst_16:


TEST_RR_OP(add, x30, x10, x20, 0x66656666, 0x66666667, -0x10001, x7, 0, x5)

inst_17:


TEST_RR_OP(add, x23, x21, x17, 0xffff80ff, 0x100, -0x8001, x7, 4, x5)

inst_18:


TEST_RR_OP(add, x24, x26, x22, 0xffffffff, 0x4000, -0x4001, x7, 8, x5)

inst_19:


TEST_RR_OP(add, x16, x9, x27, 0xffffe00f, 0x10, -0x2001, x7, 12, x5)

inst_20:


TEST_RR_OP(add, x4, x27, x6, 0xffffeffb, -0x4, -0x1001, x7, 16, x5)

inst_21:


TEST_RR_OP(add, x31, x25, x12, 0xffff7ff, 0x10000000, -0x801, x7, 20, x5)

inst_22:


TEST_RR_OP(add, x27, x30, x8, 0x1ffffbff, 0x20000000, -0x401, x7, 24, x5)

inst_23:


TEST_RR_OP(add, x21, x29, x3, 0xfffffe02, 0x3, -0x201, x7, 28, x5)

inst_24:


TEST_RR_OP(add, x22, x2, x9, 0xfffffede, -0x21, -0x101, x7, 32, x5)

inst_25:


TEST_RR_OP(add, x20, x0, x31, 0xffffff7f, 0x0, -0x81, x7, 36, x5)

inst_26:


TEST_RR_OP(add, x25, x28, x23, 0xffbfffbe, -0x400001, -0x41, x7, 40, x5)

inst_27:


TEST_RR_OP(add, x11, x1, x19, 0xffff4adc, -0xb503, -0x21, x7, 44, x5)

inst_28:


TEST_RR_OP(add, x9, x19, x29, 0xaaaaaa99, -0x55555556, -0x11, x7, 48, x2)

inst_29:


TEST_RR_OP(add, x19, x12, x13, 0x6666665d, 0x66666666, -0x9, x7, 52, x2)

inst_30:


TEST_RR_OP(add, x18, x5, x26, 0xffffffda, -0x21, -0x5, x7, 56, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_31:


TEST_RR_OP(add, x0, x4, x10, 0, 0x2, -0x3, x1, 0, x2)

inst_32:


TEST_RR_OP(add, x12, x10, x11, 0xfffffffe, 0x0, -0x2, x1, 4, x2)

inst_33:


TEST_RR_OP(add, x12, x10, x11, 0x26666664, -0x40000001, 0x66666665, x1, 8, x2)

inst_34:


TEST_RR_OP(add, x12, x10, x11, 0x13333331, -0x20000001, 0x33333332, x1, 12, x2)

inst_35:


TEST_RR_OP(add, x12, x10, x11, 0xf1ffffff, -0x10000001, 0x2000000, x1, 16, x2)

inst_36:


TEST_RR_OP(add, x12, x10, x11, 0xf6fffffe, -0x8000001, -0x1000001, x1, 20, x2)

inst_37:


TEST_RR_OP(add, x12, x10, x11, 0xf7fffffe, -0x4000001, -0x4000001, x1, 24, x2)

inst_38:


TEST_RR_OP(add, x12, x10, x11, 0xff80ffff, -0x800001, 0x10000, x1, 28, x2)

inst_39:


TEST_RR_OP(add, x12, x10, x11, 0xffdffffa, -0x200001, -0x5, x1, 32, x2)

inst_40:


TEST_RR_OP(add, x12, x10, x11, 0xffefff7e, -0x100001, -0x81, x1, 36, x2)

inst_41:


TEST_RR_OP(add, x12, x10, x11, 0xfff7fbfe, -0x80001, -0x401, x1, 40, x2)

inst_42:


TEST_RR_OP(add, x12, x10, x11, 0xffbffff, -0x40001, 0x10000000, x1, 44, x2)

inst_43:


TEST_RR_OP(add, x12, x10, x11, 0xfffd7ffe, -0x20001, -0x8001, x1, 48, x2)

inst_44:


TEST_RR_OP(add, x12, x10, x11, 0xaaaa2aaa, -0x8001, -0x55555555, x1, 52, x2)

inst_45:


TEST_RR_OP(add, x12, x10, x11, 0xffffc001, -0x4001, 0x2, x1, 56, x2)

inst_46:


TEST_RR_OP(add, x12, x10, x11, 0x1dfff, -0x2001, 0x20000, x1, 60, x2)

inst_47:


TEST_RR_OP(add, x12, x10, x11, 0xfffff7ff, -0x1001, 0x800, x1, 64, x2)

inst_48:


TEST_RR_OP(add, x12, x10, x11, 0xffff42fc, -0x801, -0xb503, x1, 68, x2)

inst_49:


TEST_RR_OP(add, x12, x10, x11, 0xfffffbff, -0x401, 0x0, x1, 72, x2)

inst_50:


TEST_RR_OP(add, x12, x10, x11, 0xfffffcfe, -0x201, -0x101, x1, 76, x2)

inst_51:


TEST_RR_OP(add, x12, x10, x11, 0xffffff75, -0x81, -0xa, x1, 80, x2)

inst_52:


TEST_RR_OP(add, x12, x10, x11, 0xffeffff6, -0x9, -0x100001, x1, 84, x2)

inst_53:


TEST_RR_OP(add, x12, x10, x11, 0xffff4af7, -0x5, -0xb504, x1, 88, x2)

inst_54:


TEST_RR_OP(add, x12, x10, x11, 0x0, -0x3, 0x3, x1, 92, x2)

inst_55:


TEST_RR_OP(add, x12, x10, x11, 0x80000003, 0x3, -0x80000000, x1, 96, x2)

inst_56:


TEST_RR_OP(add, x12, x10, x11, 0x40000009, 0x9, 0x40000000, x1, 100, x2)

inst_57:


TEST_RR_OP(add, x12, x10, x11, 0x2000b504, 0xb504, 0x20000000, x1, 104, x2)

inst_58:


TEST_RR_OP(add, x12, x10, x11, 0x6e666665, 0x66666665, 0x8000000, x1, 108, x2)

inst_59:


TEST_RR_OP(add, x12, x10, x11, 0x6000000, 0x2000000, 0x4000000, x1, 112, x2)

inst_60:


TEST_RR_OP(add, x12, x10, x11, 0x41000000, 0x40000000, 0x1000000, x1, 116, x2)

inst_61:


TEST_RR_OP(add, x12, x10, x11, 0x800004, 0x4, 0x800000, x1, 120, x2)

inst_62:


TEST_RR_OP(add, x12, x10, x11, 0x37ffff, -0x80001, 0x400000, x1, 124, x2)

inst_63:


TEST_RR_OP(add, x12, x10, x11, 0x200004, 0x4, 0x200000, x1, 128, x2)

inst_64:


TEST_RR_OP(add, x12, x10, x11, 0x100007, 0x7, 0x100000, x1, 132, x2)

inst_65:


TEST_RR_OP(add, x12, x10, x11, 0x555d5555, 0x55555555, 0x80000, x1, 136, x2)

inst_66:


TEST_RR_OP(add, x12, x10, x11, 0x40008, 0x8, 0x40000, x1, 140, x2)

inst_67:


TEST_RR_OP(add, x12, x10, x11, 0x28000, 0x20000, 0x8000, x1, 144, x2)

inst_68:


TEST_RR_OP(add, x12, x10, x11, 0x804000, 0x800000, 0x4000, x1, 148, x2)

inst_69:


TEST_RR_OP(add, x12, x10, x11, 0x4002000, 0x4000000, 0x2000, x1, 152, x2)

inst_70:


TEST_RR_OP(add, x12, x10, x11, 0x10001000, 0x10000000, 0x1000, x1, 156, x2)

inst_71:


TEST_RR_OP(add, x12, x10, x11, 0xe00003ff, -0x20000001, 0x400, x1, 160, x2)

inst_72:


TEST_RR_OP(add, x12, x10, x11, 0xf00001ff, -0x10000001, 0x200, x1, 164, x2)

inst_73:


TEST_RR_OP(add, x12, x10, x11, 0x1100, 0x1000, 0x100, x1, 168, x2)

inst_74:


TEST_RR_OP(add, x12, x10, x11, 0x80080, 0x80000, 0x80, x1, 172, x2)

inst_75:


TEST_RR_OP(add, x12, x10, x11, 0x33333372, 0x33333332, 0x40, x1, 176, x2)

inst_76:


TEST_RR_OP(add, x12, x10, x11, 0x1c, -0x4, 0x20, x1, 180, x2)

inst_77:


TEST_RR_OP(add, x12, x10, x11, 0xff80000f, -0x800001, 0x10, x1, 184, x2)

inst_78:


TEST_RR_OP(add, x12, x10, x11, 0x9, 0x1, 0x8, x1, 188, x2)

inst_79:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x66666667, 0x4, x1, 192, x2)

inst_80:


TEST_RR_OP(add, x12, x10, x11, 0xfffffe00, -0x201, 0x1, x1, 196, x2)

inst_81:


TEST_RR_OP(add, x12, x10, x11, 0x7fffeff, 0x8000000, -0x101, x1, 200, x2)

inst_82:


TEST_RR_OP(add, x12, x10, x11, 0x56555555, 0x1000000, 0x55555555, x1, 204, x2)

inst_83:


TEST_RR_OP(add, x12, x10, x11, 0x404000, 0x400000, 0x4000, x1, 208, x2)

inst_84:


TEST_RR_OP(add, x12, x10, x11, 0xc01fffff, 0x200000, -0x40000001, x1, 212, x2)

inst_85:


TEST_RR_OP(add, x12, x10, x11, 0x10b505, 0x100000, 0xb505, x1, 216, x2)

inst_86:


TEST_RR_OP(add, x12, x10, x11, 0x80000, 0x40000, 0x40000, x1, 220, x2)

inst_87:


TEST_RR_OP(add, x12, x10, x11, 0xfffd, 0x10000, -0x3, x1, 224, x2)

inst_88:


TEST_RR_OP(add, x12, x10, x11, 0x8100, 0x8000, 0x100, x1, 228, x2)

inst_89:


TEST_RR_OP(add, x12, x10, x11, 0x12000, 0x2000, 0x10000, x1, 232, x2)

inst_90:


TEST_RR_OP(add, x12, x10, x11, 0xfffc07ff, 0x800, -0x40001, x1, 236, x2)

inst_91:


TEST_RR_OP(add, x12, x10, x11, 0x66666a67, 0x400, 0x66666667, x1, 240, x2)

inst_92:


TEST_RR_OP(add, x12, x10, x11, 0x206, 0x200, 0x6, x1, 244, x2)

inst_93:


TEST_RR_OP(add, x12, x10, x11, 0xffffc07f, 0x80, -0x4001, x1, 248, x2)

inst_94:


TEST_RR_OP(add, x12, x10, x11, 0x40000040, 0x40, 0x40000000, x1, 252, x2)

inst_95:


TEST_RR_OP(add, x12, x10, x11, 0x16a0a, 0xb505, 0xb505, x1, 256, x2)

inst_96:


TEST_RR_OP(add, x12, x10, x11, 0x2, 0xb505, -0xb503, x1, 260, x2)

inst_97:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6c, 0xb505, 0x66666667, x1, 264, x2)

inst_98:


TEST_RR_OP(add, x12, x10, x11, 0x3333e839, 0xb505, 0x33333334, x1, 268, x2)

inst_99:


TEST_RR_OP(add, x12, x10, x11, 0xb50b, 0xb505, 0x6, x1, 272, x2)

inst_100:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fb0, 0xb505, -0x55555555, x1, 276, x2)

inst_101:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5b, 0xb505, 0x55555556, x1, 280, x2)

inst_102:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0xb505, 0x4, x1, 284, x2)

inst_103:


TEST_RR_OP(add, x12, x10, x11, 0x16a08, 0xb505, 0xb503, x1, 288, x2)

inst_104:


TEST_RR_OP(add, x12, x10, x11, 0xb505, 0xb505, 0x0, x1, 292, x2)

inst_105:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0xb505, 0x66666665, x1, 296, x2)

inst_106:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0xb505, 0x33333332, x1, 300, x2)

inst_107:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0xb505, 0x55555554, x1, 304, x2)

inst_108:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0xb505, 0x2, x1, 308, x2)

inst_109:


TEST_RR_OP(add, x12, x10, x11, 0x16a09, 0xb505, 0xb504, x1, 312, x2)

inst_110:


TEST_RR_OP(add, x12, x10, x11, 0x1, 0xb505, -0xb504, x1, 316, x2)

inst_111:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6b, 0xb505, 0x66666666, x1, 320, x2)

inst_112:


TEST_RR_OP(add, x12, x10, x11, 0x3333e838, 0xb505, 0x33333333, x1, 324, x2)

inst_113:


TEST_RR_OP(add, x12, x10, x11, 0xb50a, 0xb505, 0x5, x1, 328, x2)

inst_114:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5faf, 0xb505, -0x55555556, x1, 332, x2)

inst_115:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5a, 0xb505, 0x55555555, x1, 336, x2)

inst_116:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0xb505, 0x3, x1, 340, x2)

inst_117:


TEST_RR_OP(add, x12, x10, x11, 0x2, -0xb503, 0xb505, x1, 344, x2)

inst_118:


TEST_RR_OP(add, x12, x10, x11, 0xfffe95fa, -0xb503, -0xb503, x1, 348, x2)

inst_119:


TEST_RR_OP(add, x12, x10, x11, 0x6665b164, -0xb503, 0x66666667, x1, 352, x2)

inst_120:


TEST_RR_OP(add, x12, x10, x11, 0x33327e31, -0xb503, 0x33333334, x1, 356, x2)

inst_121:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b03, -0xb503, 0x6, x1, 360, x2)

inst_122:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a8, -0xb503, -0x55555555, x1, 364, x2)

inst_123:


TEST_RR_OP(add, x12, x10, x11, 0x5554a053, -0xb503, 0x55555556, x1, 368, x2)

inst_124:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b01, -0xb503, 0x4, x1, 372, x2)

inst_125:


TEST_RR_OP(add, x12, x10, x11, 0x0, -0xb503, 0xb503, x1, 376, x2)

inst_126:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afd, -0xb503, 0x0, x1, 380, x2)

inst_127:


TEST_RR_OP(add, x12, x10, x11, 0x6665b162, -0xb503, 0x66666665, x1, 384, x2)

inst_128:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2f, -0xb503, 0x33333332, x1, 388, x2)

inst_129:


TEST_RR_OP(add, x12, x10, x11, 0x5554a051, -0xb503, 0x55555554, x1, 392, x2)

inst_130:


TEST_RR_OP(add, x12, x10, x11, 0xffff4aff, -0xb503, 0x2, x1, 396, x2)

inst_131:


TEST_RR_OP(add, x12, x10, x11, 0x1, -0xb503, 0xb504, x1, 400, x2)

inst_132:


TEST_RR_OP(add, x12, x10, x11, 0xfffe95f9, -0xb503, -0xb504, x1, 404, x2)

inst_133:


TEST_RR_OP(add, x12, x10, x11, 0x6665b163, -0xb503, 0x66666666, x1, 408, x2)

inst_134:


TEST_RR_OP(add, x12, x10, x11, 0x33327e30, -0xb503, 0x33333333, x1, 412, x2)

inst_135:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b02, -0xb503, 0x5, x1, 416, x2)

inst_136:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a7, -0xb503, -0x55555556, x1, 420, x2)

inst_137:


TEST_RR_OP(add, x12, x10, x11, 0x5554a052, -0xb503, 0x55555555, x1, 424, x2)

inst_138:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b00, -0xb503, 0x3, x1, 428, x2)

inst_139:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6c, 0x66666667, 0xb505, x1, 432, x2)

inst_140:


TEST_RR_OP(add, x12, x10, x11, 0x6665b164, 0x66666667, -0xb503, x1, 436, x2)

inst_141:


TEST_RR_OP(add, x12, x10, x11, 0xccccccce, 0x66666667, 0x66666667, x1, 440, x2)

inst_142:


TEST_RR_OP(add, x12, x10, x11, 0x9999999b, 0x66666667, 0x33333334, x1, 444, x2)

inst_143:


TEST_RR_OP(add, x12, x10, x11, 0x6666666d, 0x66666667, 0x6, x1, 448, x2)

inst_144:


TEST_RR_OP(add, x12, x10, x11, 0x11111112, 0x66666667, -0x55555555, x1, 452, x2)

inst_145:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbd, 0x66666667, 0x55555556, x1, 456, x2)

inst_146:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0x66666667, 0xb503, x1, 460, x2)

inst_147:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x66666667, 0x0, x1, 464, x2)

inst_148:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccc, 0x66666667, 0x66666665, x1, 468, x2)

inst_149:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x66666667, 0x33333332, x1, 472, x2)

inst_150:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x66666667, 0x55555554, x1, 476, x2)

inst_151:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x66666667, 0x2, x1, 480, x2)

inst_152:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6b, 0x66666667, 0xb504, x1, 484, x2)

inst_153:


TEST_RR_OP(add, x12, x10, x11, 0x6665b163, 0x66666667, -0xb504, x1, 488, x2)

inst_154:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccd, 0x66666667, 0x66666666, x1, 492, x2)

inst_155:


TEST_RR_OP(add, x12, x10, x11, 0x9999999a, 0x66666667, 0x33333333, x1, 496, x2)

inst_156:


TEST_RR_OP(add, x12, x10, x11, 0x6666666c, 0x66666667, 0x5, x1, 500, x2)

inst_157:


TEST_RR_OP(add, x12, x10, x11, 0x11111111, 0x66666667, -0x55555556, x1, 504, x2)

inst_158:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbc, 0x66666667, 0x55555555, x1, 508, x2)

inst_159:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x66666667, 0x3, x1, 512, x2)

inst_160:


TEST_RR_OP(add, x12, x10, x11, 0x3333e839, 0x33333334, 0xb505, x1, 516, x2)

inst_161:


TEST_RR_OP(add, x12, x10, x11, 0x33327e31, 0x33333334, -0xb503, x1, 520, x2)

inst_162:


TEST_RR_OP(add, x12, x10, x11, 0x9999999b, 0x33333334, 0x66666667, x1, 524, x2)

inst_163:


TEST_RR_OP(add, x12, x10, x11, 0x66666668, 0x33333334, 0x33333334, x1, 528, x2)

inst_164:


TEST_RR_OP(add, x12, x10, x11, 0x3333333a, 0x33333334, 0x6, x1, 532, x2)

inst_165:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddf, 0x33333334, -0x55555555, x1, 536, x2)

inst_166:


TEST_RR_OP(add, x12, x10, x11, 0x8888888a, 0x33333334, 0x55555556, x1, 540, x2)

inst_167:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x33333334, 0x4, x1, 544, x2)

inst_168:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0x33333334, 0xb503, x1, 548, x2)

inst_169:


TEST_RR_OP(add, x12, x10, x11, 0x33333334, 0x33333334, 0x0, x1, 552, x2)

inst_170:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x33333334, 0x66666665, x1, 556, x2)

inst_171:


TEST_RR_OP(add, x12, x10, x11, 0x66666666, 0x33333334, 0x33333332, x1, 560, x2)

inst_172:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x33333334, 0x55555554, x1, 564, x2)

inst_173:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x33333334, 0x2, x1, 568, x2)

inst_174:


TEST_RR_OP(add, x12, x10, x11, 0x3333e838, 0x33333334, 0xb504, x1, 572, x2)

inst_175:


TEST_RR_OP(add, x12, x10, x11, 0x33327e30, 0x33333334, -0xb504, x1, 576, x2)

inst_176:


TEST_RR_OP(add, x12, x10, x11, 0x9999999a, 0x33333334, 0x66666666, x1, 580, x2)

inst_177:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x33333334, 0x33333333, x1, 584, x2)

inst_178:


TEST_RR_OP(add, x12, x10, x11, 0x33333339, 0x33333334, 0x5, x1, 588, x2)

inst_179:


TEST_RR_OP(add, x12, x10, x11, 0xddddddde, 0x33333334, -0x55555556, x1, 592, x2)

inst_180:


TEST_RR_OP(add, x12, x10, x11, 0x88888889, 0x33333334, 0x55555555, x1, 596, x2)

inst_181:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x33333334, 0x3, x1, 600, x2)

inst_182:


TEST_RR_OP(add, x12, x10, x11, 0xb50b, 0x6, 0xb505, x1, 604, x2)

inst_183:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b03, 0x6, -0xb503, x1, 608, x2)

inst_184:


TEST_RR_OP(add, x12, x10, x11, 0x6666666d, 0x6, 0x66666667, x1, 612, x2)

inst_185:


TEST_RR_OP(add, x12, x10, x11, 0x3333333a, 0x6, 0x33333334, x1, 616, x2)

inst_186:


TEST_RR_OP(add, x12, x10, x11, 0xc, 0x6, 0x6, x1, 620, x2)

inst_187:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab1, 0x6, -0x55555555, x1, 624, x2)

inst_188:


TEST_RR_OP(add, x12, x10, x11, 0x5555555c, 0x6, 0x55555556, x1, 628, x2)

inst_189:


TEST_RR_OP(add, x12, x10, x11, 0xa, 0x6, 0x4, x1, 632, x2)

inst_190:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0x6, 0xb503, x1, 636, x2)

inst_191:


TEST_RR_OP(add, x12, x10, x11, 0x6, 0x6, 0x0, x1, 640, x2)

inst_192:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x6, 0x66666665, x1, 644, x2)

inst_193:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x6, 0x33333332, x1, 648, x2)

inst_194:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x6, 0x55555554, x1, 652, x2)

inst_195:


TEST_RR_OP(add, x12, x10, x11, 0x8, 0x6, 0x2, x1, 656, x2)

inst_196:


TEST_RR_OP(add, x12, x10, x11, 0xb50a, 0x6, 0xb504, x1, 660, x2)

inst_197:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b02, 0x6, -0xb504, x1, 664, x2)

inst_198:


TEST_RR_OP(add, x12, x10, x11, 0x6666666c, 0x6, 0x66666666, x1, 668, x2)

inst_199:


TEST_RR_OP(add, x12, x10, x11, 0x33333339, 0x6, 0x33333333, x1, 672, x2)

inst_200:


TEST_RR_OP(add, x12, x10, x11, 0xb, 0x6, 0x5, x1, 676, x2)

inst_201:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab0, 0x6, -0x55555556, x1, 680, x2)

inst_202:


TEST_RR_OP(add, x12, x10, x11, 0x5555555b, 0x6, 0x55555555, x1, 684, x2)

inst_203:


TEST_RR_OP(add, x12, x10, x11, 0x9, 0x6, 0x3, x1, 688, x2)

inst_204:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fb0, -0x55555555, 0xb505, x1, 692, x2)

inst_205:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a8, -0x55555555, -0xb503, x1, 696, x2)

inst_206:


TEST_RR_OP(add, x12, x10, x11, 0x11111112, -0x55555555, 0x66666667, x1, 700, x2)

inst_207:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddf, -0x55555555, 0x33333334, x1, 704, x2)

inst_208:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab1, -0x55555555, 0x6, x1, 708, x2)

inst_209:


TEST_RR_OP(add, x12, x10, x11, 0x55555556, -0x55555555, -0x55555555, x1, 712, x2)

inst_210:


TEST_RR_OP(add, x12, x10, x11, 0x1, -0x55555555, 0x55555556, x1, 716, x2)

inst_211:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaf, -0x55555555, 0x4, x1, 720, x2)

inst_212:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fae, -0x55555555, 0xb503, x1, 724, x2)

inst_213:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaab, -0x55555555, 0x0, x1, 728, x2)

inst_214:


TEST_RR_OP(add, x12, x10, x11, 0x11111110, -0x55555555, 0x66666665, x1, 732, x2)

inst_215:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddd, -0x55555555, 0x33333332, x1, 736, x2)

inst_216:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, -0x55555555, 0x55555554, x1, 740, x2)

inst_217:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaad, -0x55555555, 0x2, x1, 744, x2)

inst_218:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5faf, -0x55555555, 0xb504, x1, 748, x2)

inst_219:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a7, -0x55555555, -0xb504, x1, 752, x2)

inst_220:


TEST_RR_OP(add, x12, x10, x11, 0x11111111, -0x55555555, 0x66666666, x1, 756, x2)

inst_221:


TEST_RR_OP(add, x12, x10, x11, 0xddddddde, -0x55555555, 0x33333333, x1, 760, x2)

inst_222:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab0, -0x55555555, 0x5, x1, 764, x2)

inst_223:


TEST_RR_OP(add, x12, x10, x11, 0x55555555, -0x55555555, -0x55555556, x1, 768, x2)

inst_224:


TEST_RR_OP(add, x12, x10, x11, 0x0, -0x55555555, 0x55555555, x1, 772, x2)

inst_225:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaae, -0x55555555, 0x3, x1, 776, x2)

inst_226:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5b, 0x55555556, 0xb505, x1, 780, x2)

inst_227:


TEST_RR_OP(add, x12, x10, x11, 0x5554a053, 0x55555556, -0xb503, x1, 784, x2)

inst_228:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbd, 0x55555556, 0x66666667, x1, 788, x2)

inst_229:


TEST_RR_OP(add, x12, x10, x11, 0x8888888a, 0x55555556, 0x33333334, x1, 792, x2)

inst_230:


TEST_RR_OP(add, x12, x10, x11, 0x5555555c, 0x55555556, 0x6, x1, 796, x2)

inst_231:


TEST_RR_OP(add, x12, x10, x11, 0x1, 0x55555556, -0x55555555, x1, 800, x2)

inst_232:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaac, 0x55555556, 0x55555556, x1, 804, x2)

inst_233:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x55555556, 0x4, x1, 808, x2)

inst_234:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0x55555556, 0xb503, x1, 812, x2)

inst_235:


TEST_RR_OP(add, x12, x10, x11, 0x55555556, 0x55555556, 0x0, x1, 816, x2)

inst_236:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x55555556, 0x66666665, x1, 820, x2)

inst_237:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x55555556, 0x33333332, x1, 824, x2)

inst_238:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaa, 0x55555556, 0x55555554, x1, 828, x2)

inst_239:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x55555556, 0x2, x1, 832, x2)

inst_240:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5a, 0x55555556, 0xb504, x1, 836, x2)

inst_241:


TEST_RR_OP(add, x12, x10, x11, 0x5554a052, 0x55555556, -0xb504, x1, 840, x2)

inst_242:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbc, 0x55555556, 0x66666666, x1, 844, x2)

inst_243:


TEST_RR_OP(add, x12, x10, x11, 0x88888889, 0x55555556, 0x33333333, x1, 848, x2)

inst_244:


TEST_RR_OP(add, x12, x10, x11, 0x5555555b, 0x55555556, 0x5, x1, 852, x2)

inst_245:


TEST_RR_OP(add, x12, x10, x11, 0x0, 0x55555556, -0x55555556, x1, 856, x2)

inst_246:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaab, 0x55555556, 0x55555555, x1, 860, x2)

inst_247:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x55555556, 0x3, x1, 864, x2)

inst_248:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0x4, 0xb505, x1, 868, x2)

inst_249:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b01, 0x4, -0xb503, x1, 872, x2)

inst_250:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x4, 0x66666667, x1, 876, x2)

inst_251:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x4, 0x33333334, x1, 880, x2)

inst_252:


TEST_RR_OP(add, x12, x10, x11, 0xa, 0x4, 0x6, x1, 884, x2)

inst_253:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaf, 0x4, -0x55555555, x1, 888, x2)

inst_254:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x4, 0x55555556, x1, 892, x2)

inst_255:


TEST_RR_OP(add, x12, x10, x11, 0x8, 0x4, 0x4, x1, 896, x2)

inst_256:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0x4, 0xb503, x1, 900, x2)

inst_257:


TEST_RR_OP(add, x12, x10, x11, 0x4, 0x4, 0x0, x1, 904, x2)

inst_258:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x4, 0x66666665, x1, 908, x2)

inst_259:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x4, 0x33333332, x1, 912, x2)

inst_260:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x4, 0x55555554, x1, 916, x2)

inst_261:


TEST_RR_OP(add, x12, x10, x11, 0x6, 0x4, 0x2, x1, 920, x2)

inst_262:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0x4, 0xb504, x1, 924, x2)

inst_263:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b00, 0x4, -0xb504, x1, 928, x2)

inst_264:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x4, 0x66666666, x1, 932, x2)

inst_265:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x4, 0x33333333, x1, 936, x2)

inst_266:


TEST_RR_OP(add, x12, x10, x11, 0x9, 0x4, 0x5, x1, 940, x2)

inst_267:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaae, 0x4, -0x55555556, x1, 944, x2)

inst_268:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x4, 0x55555555, x1, 948, x2)

inst_269:


TEST_RR_OP(add, x12, x10, x11, 0x7, 0x4, 0x3, x1, 952, x2)

inst_270:


TEST_RR_OP(add, x12, x10, x11, 0x16a08, 0xb503, 0xb505, x1, 956, x2)

inst_271:


TEST_RR_OP(add, x12, x10, x11, 0x0, 0xb503, -0xb503, x1, 960, x2)

inst_272:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0xb503, 0x66666667, x1, 964, x2)

inst_273:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0xb503, 0x33333334, x1, 968, x2)

inst_274:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0xb503, 0x6, x1, 972, x2)

inst_275:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fae, 0xb503, -0x55555555, x1, 976, x2)

inst_276:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0xb503, 0x55555556, x1, 980, x2)

inst_277:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0xb503, 0x4, x1, 984, x2)

inst_278:


TEST_RR_OP(add, x12, x10, x11, 0x16a06, 0xb503, 0xb503, x1, 988, x2)

inst_279:


TEST_RR_OP(add, x12, x10, x11, 0xb503, 0xb503, 0x0, x1, 992, x2)

inst_280:


TEST_RR_OP(add, x12, x10, x11, 0x66671b68, 0xb503, 0x66666665, x1, 996, x2)

inst_281:


TEST_RR_OP(add, x12, x10, x11, 0x3333e835, 0xb503, 0x33333332, x1, 1000, x2)

inst_282:


TEST_RR_OP(add, x12, x10, x11, 0x55560a57, 0xb503, 0x55555554, x1, 1004, x2)

inst_283:


TEST_RR_OP(add, x12, x10, x11, 0xb505, 0xb503, 0x2, x1, 1008, x2)

inst_284:


TEST_RR_OP(add, x12, x10, x11, 0x16a07, 0xb503, 0xb504, x1, 1012, x2)

inst_285:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, 0xb503, -0xb504, x1, 1016, x2)

inst_286:


TEST_RR_OP(add, x12, x10, x11, 0x66671b69, 0xb503, 0x66666666, x1, 1020, x2)

inst_287:


TEST_RR_OP(add, x12, x10, x11, 0x3333e836, 0xb503, 0x33333333, x1, 1024, x2)

inst_288:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0xb503, 0x5, x1, 1028, x2)

inst_289:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fad, 0xb503, -0x55555556, x1, 1032, x2)

inst_290:


TEST_RR_OP(add, x12, x10, x11, 0x55560a58, 0xb503, 0x55555555, x1, 1036, x2)

inst_291:


TEST_RR_OP(add, x12, x10, x11, 0xb506, 0xb503, 0x3, x1, 1040, x2)

inst_292:


TEST_RR_OP(add, x12, x10, x11, 0xb505, 0x0, 0xb505, x1, 1044, x2)

inst_293:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afd, 0x0, -0xb503, x1, 1048, x2)

inst_294:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x0, 0x66666667, x1, 1052, x2)

inst_295:


TEST_RR_OP(add, x12, x10, x11, 0x33333334, 0x0, 0x33333334, x1, 1056, x2)

inst_296:


TEST_RR_OP(add, x12, x10, x11, 0x6, 0x0, 0x6, x1, 1060, x2)

inst_297:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaab, 0x0, -0x55555555, x1, 1064, x2)

inst_298:


TEST_RR_OP(add, x12, x10, x11, 0x55555556, 0x0, 0x55555556, x1, 1068, x2)

inst_299:


TEST_RR_OP(add, x12, x10, x11, 0x4, 0x0, 0x4, x1, 1072, x2)

inst_300:


TEST_RR_OP(add, x12, x10, x11, 0xb503, 0x0, 0xb503, x1, 1076, x2)

inst_301:


TEST_RR_OP(add, x12, x10, x11, 0x0, 0x0, 0x0, x1, 1080, x2)

inst_302:


TEST_RR_OP(add, x12, x10, x11, 0x66666665, 0x0, 0x66666665, x1, 1084, x2)

inst_303:


TEST_RR_OP(add, x12, x10, x11, 0x33333332, 0x0, 0x33333332, x1, 1088, x2)

inst_304:


TEST_RR_OP(add, x12, x10, x11, 0x55555554, 0x0, 0x55555554, x1, 1092, x2)

inst_305:


TEST_RR_OP(add, x12, x10, x11, 0x2, 0x0, 0x2, x1, 1096, x2)

inst_306:


TEST_RR_OP(add, x12, x10, x11, 0xb504, 0x0, 0xb504, x1, 1100, x2)

inst_307:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afc, 0x0, -0xb504, x1, 1104, x2)

inst_308:


TEST_RR_OP(add, x12, x10, x11, 0x66666666, 0x0, 0x66666666, x1, 1108, x2)

inst_309:


TEST_RR_OP(add, x12, x10, x11, 0x33333333, 0x0, 0x33333333, x1, 1112, x2)

inst_310:


TEST_RR_OP(add, x12, x10, x11, 0x5, 0x0, 0x5, x1, 1116, x2)

inst_311:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaa, 0x0, -0x55555556, x1, 1120, x2)

inst_312:


TEST_RR_OP(add, x12, x10, x11, 0x55555555, 0x0, 0x55555555, x1, 1124, x2)

inst_313:


TEST_RR_OP(add, x12, x10, x11, 0x3, 0x0, 0x3, x1, 1128, x2)

inst_314:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0x66666665, 0xb505, x1, 1132, x2)

inst_315:


TEST_RR_OP(add, x12, x10, x11, 0x6665b162, 0x66666665, -0xb503, x1, 1136, x2)

inst_316:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccc, 0x66666665, 0x66666667, x1, 1140, x2)

inst_317:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x66666665, 0x33333334, x1, 1144, x2)

inst_318:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x66666665, 0x6, x1, 1148, x2)

inst_319:


TEST_RR_OP(add, x12, x10, x11, 0x11111110, 0x66666665, -0x55555555, x1, 1152, x2)

inst_320:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x66666665, 0x55555556, x1, 1156, x2)

inst_321:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x66666665, 0x4, x1, 1160, x2)

inst_322:


TEST_RR_OP(add, x12, x10, x11, 0x66671b68, 0x66666665, 0xb503, x1, 1164, x2)

inst_323:


TEST_RR_OP(add, x12, x10, x11, 0x33333333, 0x33333333, 0x0, x1, 1168, x2)

inst_324:


TEST_RR_OP(add, x12, x10, x11, 0x99999998, 0x33333333, 0x66666665, x1, 1172, x2)

inst_325:


TEST_RR_OP(add, x12, x10, x11, 0x66666665, 0x33333333, 0x33333332, x1, 1176, x2)

inst_326:


TEST_RR_OP(add, x12, x10, x11, 0x88888887, 0x33333333, 0x55555554, x1, 1180, x2)

inst_327:


TEST_RR_OP(add, x12, x10, x11, 0x33333335, 0x33333333, 0x2, x1, 1184, x2)

inst_328:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0x33333333, 0xb504, x1, 1188, x2)

inst_329:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2f, 0x33333333, -0xb504, x1, 1192, x2)

inst_330:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x33333333, 0x66666666, x1, 1196, x2)

inst_331:


TEST_RR_OP(add, x12, x10, x11, 0x66666666, 0x33333333, 0x33333333, x1, 1200, x2)

inst_332:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x33333333, 0x5, x1, 1204, x2)

inst_333:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddd, 0x33333333, -0x55555556, x1, 1208, x2)

inst_334:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x33333333, 0x55555555, x1, 1212, x2)

inst_335:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x33333333, 0x3, x1, 1216, x2)

inst_336:


TEST_RR_OP(add, x12, x10, x11, 0xb50a, 0x5, 0xb505, x1, 1220, x2)

inst_337:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b02, 0x5, -0xb503, x1, 1224, x2)

inst_338:


TEST_RR_OP(add, x12, x10, x11, 0x6666666c, 0x5, 0x66666667, x1, 1228, x2)

inst_339:


TEST_RR_OP(add, x12, x10, x11, 0x33333339, 0x5, 0x33333334, x1, 1232, x2)

inst_340:


TEST_RR_OP(add, x12, x10, x11, 0xb, 0x5, 0x6, x1, 1236, x2)

inst_341:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab0, 0x5, -0x55555555, x1, 1240, x2)

inst_342:


TEST_RR_OP(add, x12, x10, x11, 0x5555555b, 0x5, 0x55555556, x1, 1244, x2)

inst_343:


TEST_RR_OP(add, x12, x10, x11, 0x9, 0x5, 0x4, x1, 1248, x2)

inst_344:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0x5, 0xb503, x1, 1252, x2)

inst_345:


TEST_RR_OP(add, x12, x10, x11, 0x5, 0x5, 0x0, x1, 1256, x2)

inst_346:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x5, 0x66666665, x1, 1260, x2)

inst_347:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x5, 0x33333332, x1, 1264, x2)

inst_348:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x5, 0x55555554, x1, 1268, x2)

inst_349:


TEST_RR_OP(add, x12, x10, x11, 0x7, 0x5, 0x2, x1, 1272, x2)

inst_350:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0x5, 0xb504, x1, 1276, x2)

inst_351:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b01, 0x5, -0xb504, x1, 1280, x2)

inst_352:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x5, 0x66666666, x1, 1284, x2)

inst_353:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x5, 0x33333333, x1, 1288, x2)

inst_354:


TEST_RR_OP(add, x12, x10, x11, 0xa, 0x5, 0x5, x1, 1292, x2)

inst_355:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaf, 0x5, -0x55555556, x1, 1296, x2)

inst_356:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x5, 0x55555555, x1, 1300, x2)

inst_357:


TEST_RR_OP(add, x12, x10, x11, 0x8, 0x5, 0x3, x1, 1304, x2)

inst_358:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5faf, -0x55555556, 0xb505, x1, 1308, x2)

inst_359:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a7, -0x55555556, -0xb503, x1, 1312, x2)

inst_360:


TEST_RR_OP(add, x12, x10, x11, 0x11111111, -0x55555556, 0x66666667, x1, 1316, x2)

inst_361:


TEST_RR_OP(add, x12, x10, x11, 0xddddddde, -0x55555556, 0x33333334, x1, 1320, x2)

inst_362:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaab0, -0x55555556, 0x6, x1, 1324, x2)

inst_363:


TEST_RR_OP(add, x12, x10, x11, 0x55555555, -0x55555556, -0x55555555, x1, 1328, x2)

inst_364:


TEST_RR_OP(add, x12, x10, x11, 0x0, -0x55555556, 0x55555556, x1, 1332, x2)

inst_365:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaae, -0x55555556, 0x4, x1, 1336, x2)

inst_366:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fad, -0x55555556, 0xb503, x1, 1340, x2)

inst_367:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaa, -0x55555556, 0x0, x1, 1344, x2)

inst_368:


TEST_RR_OP(add, x12, x10, x11, 0x1111110f, -0x55555556, 0x66666665, x1, 1348, x2)

inst_369:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddc, -0x55555556, 0x33333332, x1, 1352, x2)

inst_370:


TEST_RR_OP(add, x12, x10, x11, 0xfffffffe, -0x55555556, 0x55555554, x1, 1356, x2)

inst_371:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaac, -0x55555556, 0x2, x1, 1360, x2)

inst_372:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fae, -0x55555556, 0xb504, x1, 1364, x2)

inst_373:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a6, -0x55555556, -0xb504, x1, 1368, x2)

inst_374:


TEST_RR_OP(add, x12, x10, x11, 0x11111110, -0x55555556, 0x66666666, x1, 1372, x2)

inst_375:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddd, -0x55555556, 0x33333333, x1, 1376, x2)

inst_376:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaf, -0x55555556, 0x5, x1, 1380, x2)

inst_377:


TEST_RR_OP(add, x12, x10, x11, 0x55555554, -0x55555556, -0x55555556, x1, 1384, x2)

inst_378:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, -0x55555556, 0x55555555, x1, 1388, x2)

inst_379:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaad, -0x55555556, 0x3, x1, 1392, x2)

inst_380:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5a, 0x55555555, 0xb505, x1, 1396, x2)

inst_381:


TEST_RR_OP(add, x12, x10, x11, 0x5554a052, 0x55555555, -0xb503, x1, 1400, x2)

inst_382:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbc, 0x55555555, 0x66666667, x1, 1404, x2)

inst_383:


TEST_RR_OP(add, x12, x10, x11, 0x88888889, 0x55555555, 0x33333334, x1, 1408, x2)

inst_384:


TEST_RR_OP(add, x12, x10, x11, 0x5555555b, 0x55555555, 0x6, x1, 1412, x2)

inst_385:


TEST_RR_OP(add, x12, x10, x11, 0x0, 0x55555555, -0x55555555, x1, 1416, x2)

inst_386:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaab, 0x55555555, 0x55555556, x1, 1420, x2)

inst_387:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x55555555, 0x4, x1, 1424, x2)

inst_388:


TEST_RR_OP(add, x12, x10, x11, 0x55560a58, 0x55555555, 0xb503, x1, 1428, x2)

inst_389:


TEST_RR_OP(add, x12, x10, x11, 0x55555555, 0x55555555, 0x0, x1, 1432, x2)

inst_390:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbba, 0x55555555, 0x66666665, x1, 1436, x2)

inst_391:


TEST_RR_OP(add, x12, x10, x11, 0x88888887, 0x55555555, 0x33333332, x1, 1440, x2)

inst_392:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaa9, 0x55555555, 0x55555554, x1, 1444, x2)

inst_393:


TEST_RR_OP(add, x12, x10, x11, 0x55555557, 0x55555555, 0x2, x1, 1448, x2)

inst_394:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0x55555555, 0xb504, x1, 1452, x2)

inst_395:


TEST_RR_OP(add, x12, x10, x11, 0x5554a051, 0x55555555, -0xb504, x1, 1456, x2)

inst_396:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x55555555, 0x66666666, x1, 1460, x2)

inst_397:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x55555555, 0x33333333, x1, 1464, x2)

inst_398:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x55555555, 0x5, x1, 1468, x2)

inst_399:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, 0x55555555, -0x55555556, x1, 1472, x2)

inst_400:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaa, 0x55555555, 0x55555555, x1, 1476, x2)

inst_401:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x55555555, 0x3, x1, 1480, x2)

inst_402:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0x3, 0xb505, x1, 1484, x2)

inst_403:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b00, 0x3, -0xb503, x1, 1488, x2)

inst_404:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x3, 0x66666667, x1, 1492, x2)

inst_405:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x3, 0x33333334, x1, 1496, x2)

inst_406:


TEST_RR_OP(add, x12, x10, x11, 0x9, 0x3, 0x6, x1, 1500, x2)

inst_407:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaae, 0x3, -0x55555555, x1, 1504, x2)

inst_408:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x3, 0x55555556, x1, 1508, x2)

inst_409:


TEST_RR_OP(add, x12, x10, x11, 0x7, 0x3, 0x4, x1, 1512, x2)

inst_410:


TEST_RR_OP(add, x12, x10, x11, 0xb506, 0x3, 0xb503, x1, 1516, x2)

inst_411:


TEST_RR_OP(add, x12, x10, x11, 0x3, 0x3, 0x0, x1, 1520, x2)

inst_412:


TEST_RR_OP(add, x12, x10, x11, 0x66666668, 0x3, 0x66666665, x1, 1524, x2)

inst_413:


TEST_RR_OP(add, x12, x10, x11, 0x33333335, 0x3, 0x33333332, x1, 1528, x2)

inst_414:


TEST_RR_OP(add, x12, x10, x11, 0x55555557, 0x3, 0x55555554, x1, 1532, x2)

inst_415:


TEST_RR_OP(add, x12, x10, x11, 0x5, 0x3, 0x2, x1, 1536, x2)

inst_416:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0x3, 0xb504, x1, 1540, x2)

inst_417:


TEST_RR_OP(add, x12, x10, x11, 0xffff4aff, 0x3, -0xb504, x1, 1544, x2)

inst_418:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x3, 0x66666666, x1, 1548, x2)

inst_419:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x3, 0x33333333, x1, 1552, x2)

inst_420:


TEST_RR_OP(add, x12, x10, x11, 0x8, 0x3, 0x5, x1, 1556, x2)

inst_421:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaad, 0x3, -0x55555556, x1, 1560, x2)

inst_422:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x3, 0x55555555, x1, 1564, x2)

inst_423:


TEST_RR_OP(add, x12, x10, x11, 0x6, 0x3, 0x3, x1, 1568, x2)

inst_424:


TEST_RR_OP(add, x12, x10, x11, 0x66666665, 0x66666665, 0x0, x1, 1572, x2)

inst_425:


TEST_RR_OP(add, x12, x10, x11, 0xccccccca, 0x66666665, 0x66666665, x1, 1576, x2)

inst_426:


TEST_RR_OP(add, x12, x10, x11, 0x99999997, 0x66666665, 0x33333332, x1, 1580, x2)

inst_427:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbb9, 0x66666665, 0x55555554, x1, 1584, x2)

inst_428:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x66666665, 0x2, x1, 1588, x2)

inst_429:


TEST_RR_OP(add, x12, x10, x11, 0x66671b69, 0x66666665, 0xb504, x1, 1592, x2)

inst_430:


TEST_RR_OP(add, x12, x10, x11, 0x6665b161, 0x66666665, -0xb504, x1, 1596, x2)

inst_431:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccb, 0x66666665, 0x66666666, x1, 1600, x2)

inst_432:


TEST_RR_OP(add, x12, x10, x11, 0x99999998, 0x66666665, 0x33333333, x1, 1604, x2)

inst_433:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x66666665, 0x5, x1, 1608, x2)

inst_434:


TEST_RR_OP(add, x12, x10, x11, 0x1111110f, 0x66666665, -0x55555556, x1, 1612, x2)

inst_435:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbba, 0x66666665, 0x55555555, x1, 1616, x2)

inst_436:


TEST_RR_OP(add, x12, x10, x11, 0x66666668, 0x66666665, 0x3, x1, 1620, x2)

inst_437:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0x33333332, 0xb505, x1, 1624, x2)

inst_438:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2f, 0x33333332, -0xb503, x1, 1628, x2)

inst_439:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x33333332, 0x66666667, x1, 1632, x2)

inst_440:


TEST_RR_OP(add, x12, x10, x11, 0x66666666, 0x33333332, 0x33333334, x1, 1636, x2)

inst_441:


TEST_RR_OP(add, x12, x10, x11, 0x33333338, 0x33333332, 0x6, x1, 1640, x2)

inst_442:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddd, 0x33333332, -0x55555555, x1, 1644, x2)

inst_443:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x33333332, 0x55555556, x1, 1648, x2)

inst_444:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x33333332, 0x4, x1, 1652, x2)

inst_445:


TEST_RR_OP(add, x12, x10, x11, 0x3333e835, 0x33333332, 0xb503, x1, 1656, x2)

inst_446:


TEST_RR_OP(add, x12, x10, x11, 0x33333332, 0x33333332, 0x0, x1, 1660, x2)

inst_447:


TEST_RR_OP(add, x12, x10, x11, 0x99999997, 0x33333332, 0x66666665, x1, 1664, x2)

inst_448:


TEST_RR_OP(add, x12, x10, x11, 0x66666664, 0x33333332, 0x33333332, x1, 1668, x2)

inst_449:


TEST_RR_OP(add, x12, x10, x11, 0x88888886, 0x33333332, 0x55555554, x1, 1672, x2)

inst_450:


TEST_RR_OP(add, x12, x10, x11, 0x33333334, 0x33333332, 0x2, x1, 1676, x2)

inst_451:


TEST_RR_OP(add, x12, x10, x11, 0x3333e836, 0x33333332, 0xb504, x1, 1680, x2)

inst_452:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2e, 0x33333332, -0xb504, x1, 1684, x2)

inst_453:


TEST_RR_OP(add, x12, x10, x11, 0x99999998, 0x33333332, 0x66666666, x1, 1688, x2)

inst_454:


TEST_RR_OP(add, x12, x10, x11, 0x66666665, 0x33333332, 0x33333333, x1, 1692, x2)

inst_455:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x33333332, 0x5, x1, 1696, x2)

inst_456:


TEST_RR_OP(add, x12, x10, x11, 0xdddddddc, 0x33333332, -0x55555556, x1, 1700, x2)

inst_457:


TEST_RR_OP(add, x12, x10, x11, 0x88888887, 0x33333332, 0x55555555, x1, 1704, x2)

inst_458:


TEST_RR_OP(add, x12, x10, x11, 0x33333335, 0x33333332, 0x3, x1, 1708, x2)

inst_459:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0x55555554, 0xb505, x1, 1712, x2)

inst_460:


TEST_RR_OP(add, x12, x10, x11, 0x5554a051, 0x55555554, -0xb503, x1, 1716, x2)

inst_461:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x55555554, 0x66666667, x1, 1720, x2)

inst_462:


TEST_RR_OP(add, x12, x10, x11, 0x88888888, 0x55555554, 0x33333334, x1, 1724, x2)

inst_463:


TEST_RR_OP(add, x12, x10, x11, 0x5555555a, 0x55555554, 0x6, x1, 1728, x2)

inst_464:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, 0x55555554, -0x55555555, x1, 1732, x2)

inst_465:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaaa, 0x55555554, 0x55555556, x1, 1736, x2)

inst_466:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x55555554, 0x4, x1, 1740, x2)

inst_467:


TEST_RR_OP(add, x12, x10, x11, 0x55560a57, 0x55555554, 0xb503, x1, 1744, x2)

inst_468:


TEST_RR_OP(add, x12, x10, x11, 0x55555554, 0x55555554, 0x0, x1, 1748, x2)

inst_469:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbb9, 0x55555554, 0x66666665, x1, 1752, x2)

inst_470:


TEST_RR_OP(add, x12, x10, x11, 0x88888886, 0x55555554, 0x33333332, x1, 1756, x2)

inst_471:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaa8, 0x55555554, 0x55555554, x1, 1760, x2)

inst_472:


TEST_RR_OP(add, x12, x10, x11, 0x55555556, 0x55555554, 0x2, x1, 1764, x2)

inst_473:


TEST_RR_OP(add, x12, x10, x11, 0x55560a58, 0x55555554, 0xb504, x1, 1768, x2)

inst_474:


TEST_RR_OP(add, x12, x10, x11, 0x5554a050, 0x55555554, -0xb504, x1, 1772, x2)

inst_475:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbba, 0x55555554, 0x66666666, x1, 1776, x2)

inst_476:


TEST_RR_OP(add, x12, x10, x11, 0x88888887, 0x55555554, 0x33333333, x1, 1780, x2)

inst_477:


TEST_RR_OP(add, x12, x10, x11, 0x55555559, 0x55555554, 0x5, x1, 1784, x2)

inst_478:


TEST_RR_OP(add, x12, x10, x11, 0xfffffffe, 0x55555554, -0x55555556, x1, 1788, x2)

inst_479:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaa9, 0x55555554, 0x55555555, x1, 1792, x2)

inst_480:


TEST_RR_OP(add, x12, x10, x11, 0x55555557, 0x55555554, 0x3, x1, 1796, x2)

inst_481:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0x2, 0xb505, x1, 1800, x2)

inst_482:


TEST_RR_OP(add, x12, x10, x11, 0xffff4aff, 0x2, -0xb503, x1, 1804, x2)

inst_483:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x2, 0x66666667, x1, 1808, x2)

inst_484:


TEST_RR_OP(add, x12, x10, x11, 0x33333336, 0x2, 0x33333334, x1, 1812, x2)

inst_485:


TEST_RR_OP(add, x12, x10, x11, 0x8, 0x2, 0x6, x1, 1816, x2)

inst_486:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaad, 0x2, -0x55555555, x1, 1820, x2)

inst_487:


TEST_RR_OP(add, x12, x10, x11, 0x55555558, 0x2, 0x55555556, x1, 1824, x2)

inst_488:


TEST_RR_OP(add, x12, x10, x11, 0x6, 0x2, 0x4, x1, 1828, x2)

inst_489:


TEST_RR_OP(add, x12, x10, x11, 0xb505, 0x2, 0xb503, x1, 1832, x2)

inst_490:


TEST_RR_OP(add, x12, x10, x11, 0x2, 0x2, 0x0, x1, 1836, x2)

inst_491:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x2, 0x66666665, x1, 1840, x2)

inst_492:


TEST_RR_OP(add, x12, x10, x11, 0x33333334, 0x2, 0x33333332, x1, 1844, x2)

inst_493:


TEST_RR_OP(add, x12, x10, x11, 0x55555556, 0x2, 0x55555554, x1, 1848, x2)

inst_494:


TEST_RR_OP(add, x12, x10, x11, 0x4, 0x2, 0x2, x1, 1852, x2)

inst_495:


TEST_RR_OP(add, x12, x10, x11, 0xb506, 0x2, 0xb504, x1, 1856, x2)

inst_496:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afe, 0x2, -0xb504, x1, 1860, x2)

inst_497:


TEST_RR_OP(add, x12, x10, x11, 0x66666668, 0x2, 0x66666666, x1, 1864, x2)

inst_498:


TEST_RR_OP(add, x12, x10, x11, 0x33333335, 0x2, 0x33333333, x1, 1868, x2)

inst_499:


TEST_RR_OP(add, x12, x10, x11, 0x7, 0x2, 0x5, x1, 1872, x2)

inst_500:


TEST_RR_OP(add, x12, x10, x11, 0xaaaaaaac, 0x2, -0x55555556, x1, 1876, x2)

inst_501:


TEST_RR_OP(add, x12, x10, x11, 0x55555557, 0x2, 0x55555555, x1, 1880, x2)

inst_502:


TEST_RR_OP(add, x12, x10, x11, 0x5, 0x2, 0x3, x1, 1884, x2)

inst_503:


TEST_RR_OP(add, x12, x10, x11, 0x16a09, 0xb504, 0xb505, x1, 1888, x2)

inst_504:


TEST_RR_OP(add, x12, x10, x11, 0x1, 0xb504, -0xb503, x1, 1892, x2)

inst_505:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6b, 0xb504, 0x66666667, x1, 1896, x2)

inst_506:


TEST_RR_OP(add, x12, x10, x11, 0x3333e838, 0xb504, 0x33333334, x1, 1900, x2)

inst_507:


TEST_RR_OP(add, x12, x10, x11, 0xb50a, 0xb504, 0x6, x1, 1904, x2)

inst_508:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5faf, 0xb504, -0x55555555, x1, 1908, x2)

inst_509:


TEST_RR_OP(add, x12, x10, x11, 0x55560a5a, 0xb504, 0x55555556, x1, 1912, x2)

inst_510:


TEST_RR_OP(add, x12, x10, x11, 0xb508, 0xb504, 0x4, x1, 1916, x2)

inst_511:


TEST_RR_OP(add, x12, x10, x11, 0x16a07, 0xb504, 0xb503, x1, 1920, x2)

inst_512:


TEST_RR_OP(add, x12, x10, x11, 0xb504, 0xb504, 0x0, x1, 1924, x2)

inst_513:


TEST_RR_OP(add, x12, x10, x11, 0x66671b69, 0xb504, 0x66666665, x1, 1928, x2)

inst_514:


TEST_RR_OP(add, x12, x10, x11, 0x3333e836, 0xb504, 0x33333332, x1, 1932, x2)

inst_515:


TEST_RR_OP(add, x12, x10, x11, 0x55560a58, 0xb504, 0x55555554, x1, 1936, x2)

inst_516:


TEST_RR_OP(add, x12, x10, x11, 0xb506, 0xb504, 0x2, x1, 1940, x2)

inst_517:


TEST_RR_OP(add, x12, x10, x11, 0x16a08, 0xb504, 0xb504, x1, 1944, x2)

inst_518:


TEST_RR_OP(add, x12, x10, x11, 0x0, 0xb504, -0xb504, x1, 1948, x2)

inst_519:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0xb504, 0x66666666, x1, 1952, x2)

inst_520:


TEST_RR_OP(add, x12, x10, x11, 0x3333e837, 0xb504, 0x33333333, x1, 1956, x2)

inst_521:


TEST_RR_OP(add, x12, x10, x11, 0xb509, 0xb504, 0x5, x1, 1960, x2)

inst_522:


TEST_RR_OP(add, x12, x10, x11, 0xaaab5fae, 0xb504, -0x55555556, x1, 1964, x2)

inst_523:


TEST_RR_OP(add, x12, x10, x11, 0x55560a59, 0xb504, 0x55555555, x1, 1968, x2)

inst_524:


TEST_RR_OP(add, x12, x10, x11, 0xb507, 0xb504, 0x3, x1, 1972, x2)

inst_525:


TEST_RR_OP(add, x12, x10, x11, 0x1, -0xb504, 0xb505, x1, 1976, x2)

inst_526:


TEST_RR_OP(add, x12, x10, x11, 0xfffe95f9, -0xb504, -0xb503, x1, 1980, x2)

inst_527:


TEST_RR_OP(add, x12, x10, x11, 0x6665b163, -0xb504, 0x66666667, x1, 1984, x2)

inst_528:


TEST_RR_OP(add, x12, x10, x11, 0x33327e30, -0xb504, 0x33333334, x1, 1988, x2)

inst_529:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b02, -0xb504, 0x6, x1, 1992, x2)

inst_530:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a7, -0xb504, -0x55555555, x1, 1996, x2)

inst_531:


TEST_RR_OP(add, x12, x10, x11, 0x5554a052, -0xb504, 0x55555556, x1, 2000, x2)

inst_532:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b00, -0xb504, 0x4, x1, 2004, x2)

inst_533:


TEST_RR_OP(add, x12, x10, x11, 0xffffffff, -0xb504, 0xb503, x1, 2008, x2)

inst_534:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afc, -0xb504, 0x0, x1, 2012, x2)

inst_535:


TEST_RR_OP(add, x12, x10, x11, 0x6665b161, -0xb504, 0x66666665, x1, 2016, x2)

inst_536:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2e, -0xb504, 0x33333332, x1, 2020, x2)

inst_537:


TEST_RR_OP(add, x12, x10, x11, 0x5554a050, -0xb504, 0x55555554, x1, 2024, x2)

inst_538:


TEST_RR_OP(add, x12, x10, x11, 0xffff4afe, -0xb504, 0x2, x1, 2028, x2)

inst_539:


TEST_RR_OP(add, x12, x10, x11, 0x0, -0xb504, 0xb504, x1, 2032, x2)

inst_540:


TEST_RR_OP(add, x12, x10, x11, 0xfffe95f8, -0xb504, -0xb504, x1, 2036, x2)

inst_541:


TEST_RR_OP(add, x12, x10, x11, 0x6665b162, -0xb504, 0x66666666, x1, 2040, x2)

inst_542:


TEST_RR_OP(add, x12, x10, x11, 0x33327e2f, -0xb504, 0x33333333, x1, 2044, x2)
RVTEST_SIGBASE( x1,signature_x1_1)

inst_543:


TEST_RR_OP(add, x12, x10, x11, 0xffff4b01, -0xb504, 0x5, x1, 0, x2)

inst_544:


TEST_RR_OP(add, x12, x10, x11, 0xaaa9f5a6, -0xb504, -0x55555556, x1, 4, x2)

inst_545:


TEST_RR_OP(add, x12, x10, x11, 0x5554a051, -0xb504, 0x55555555, x1, 8, x2)

inst_546:


TEST_RR_OP(add, x12, x10, x11, 0xffff4aff, -0xb504, 0x3, x1, 12, x2)

inst_547:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6b, 0x66666666, 0xb505, x1, 16, x2)

inst_548:


TEST_RR_OP(add, x12, x10, x11, 0x6665b163, 0x66666666, -0xb503, x1, 20, x2)

inst_549:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccd, 0x66666666, 0x66666667, x1, 24, x2)

inst_550:


TEST_RR_OP(add, x12, x10, x11, 0x9999999a, 0x66666666, 0x33333334, x1, 28, x2)

inst_551:


TEST_RR_OP(add, x12, x10, x11, 0x6666666c, 0x66666666, 0x6, x1, 32, x2)

inst_552:


TEST_RR_OP(add, x12, x10, x11, 0x11111111, 0x66666666, -0x55555555, x1, 36, x2)

inst_553:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbc, 0x66666666, 0x55555556, x1, 40, x2)

inst_554:


TEST_RR_OP(add, x12, x10, x11, 0x6666666a, 0x66666666, 0x4, x1, 44, x2)

inst_555:


TEST_RR_OP(add, x12, x10, x11, 0x66671b69, 0x66666666, 0xb503, x1, 48, x2)

inst_556:


TEST_RR_OP(add, x12, x10, x11, 0x66666666, 0x66666666, 0x0, x1, 52, x2)

inst_557:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccb, 0x66666666, 0x66666665, x1, 56, x2)

inst_558:


TEST_RR_OP(add, x12, x10, x11, 0x99999998, 0x66666666, 0x33333332, x1, 60, x2)

inst_559:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbba, 0x66666666, 0x55555554, x1, 64, x2)

inst_560:


TEST_RR_OP(add, x12, x10, x11, 0x66666668, 0x66666666, 0x2, x1, 68, x2)

inst_561:


TEST_RR_OP(add, x12, x10, x11, 0x66671b6a, 0x66666666, 0xb504, x1, 72, x2)

inst_562:


TEST_RR_OP(add, x12, x10, x11, 0x6665b162, 0x66666666, -0xb504, x1, 76, x2)

inst_563:


TEST_RR_OP(add, x12, x10, x11, 0xcccccccc, 0x66666666, 0x66666666, x1, 80, x2)

inst_564:


TEST_RR_OP(add, x12, x10, x11, 0x99999999, 0x66666666, 0x33333333, x1, 84, x2)

inst_565:


TEST_RR_OP(add, x12, x10, x11, 0x6666666b, 0x66666666, 0x5, x1, 88, x2)

inst_566:


TEST_RR_OP(add, x12, x10, x11, 0x11111110, 0x66666666, -0x55555556, x1, 92, x2)

inst_567:


TEST_RR_OP(add, x12, x10, x11, 0xbbbbbbbb, 0x66666666, 0x55555555, x1, 96, x2)

inst_568:


TEST_RR_OP(add, x12, x10, x11, 0x66666669, 0x66666666, 0x3, x1, 100, x2)

inst_569:


TEST_RR_OP(add, x12, x10, x11, 0x3333e838, 0x33333333, 0xb505, x1, 104, x2)

inst_570:


TEST_RR_OP(add, x12, x10, x11, 0x33327e30, 0x33333333, -0xb503, x1, 108, x2)

inst_571:


TEST_RR_OP(add, x12, x10, x11, 0x9999999a, 0x33333333, 0x66666667, x1, 112, x2)

inst_572:


TEST_RR_OP(add, x12, x10, x11, 0x66666667, 0x33333333, 0x33333334, x1, 116, x2)

inst_573:


TEST_RR_OP(add, x12, x10, x11, 0x33333339, 0x33333333, 0x6, x1, 120, x2)

inst_574:


TEST_RR_OP(add, x12, x10, x11, 0xddddddde, 0x33333333, -0x55555555, x1, 124, x2)

inst_575:


TEST_RR_OP(add, x12, x10, x11, 0x88888889, 0x33333333, 0x55555556, x1, 128, x2)

inst_576:


TEST_RR_OP(add, x12, x10, x11, 0x33333337, 0x33333333, 0x4, x1, 132, x2)

inst_577:


TEST_RR_OP(add, x12, x10, x11, 0x3333e836, 0x33333333, 0xb503, x1, 136, x2)

inst_578:


TEST_RR_OP(add, x12, x10, x11, 0xeffffffb, -0x4, -0x10000001, x1, 140, x2)

inst_579:


TEST_RR_OP(add, x12, x10, x11, 0x77ffffff, -0x80000000, -0x8000001, x1, 144, x2)

inst_580:


TEST_RR_OP(add, x12, x10, x11, 0xfffeff7e, -0x10001, -0x81, x1, 148, x2)



RVTEST_CODE_END
self_loop: j self_loop;

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END


# 2973 "add-01.S"

