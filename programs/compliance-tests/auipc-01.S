// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.5.0
// timestamp : Sun Jul 18 21:01:27 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /home/mwojcik/riscv/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/mwojcik/riscv/riscv_ctg/sample_cgfs/rv32i.cgf \
//                  --base-isa rv32i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the auipc instruction of the RISC-V I extension for the auipc covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",auipc)

RVTEST_SIGBASE( x6,signature_x6_1)

inst_0:
// rd==x14, imm_val == ((2**20)-1), imm_val > 0
// opcode: auipc ; dest:x14; immval:0xfffff
TEST_AUIPC(auipc, x14, -0x1000, 0xfffff, x6, 0, x8)

inst_1:
// rd==x3, imm_val == 524287, 
// opcode: auipc ; dest:x3; immval:0x7ffff
TEST_AUIPC(auipc, x3, 0x7ffff000, 0x7ffff, x6, 4, x8)

inst_2:
// rd==x16, imm_val == 786431, 
// opcode: auipc ; dest:x16; immval:0xbffff
TEST_AUIPC(auipc, x16, -0x40001000, 0xbffff, x6, 8, x8)

inst_3:
// rd==x10, imm_val == 917503, 
// opcode: auipc ; dest:x10; immval:0xdffff
TEST_AUIPC(auipc, x10, -0x20001000, 0xdffff, x6, 12, x8)

inst_4:
// rd==x19, imm_val == 983039, 
// opcode: auipc ; dest:x19; immval:0xeffff
TEST_AUIPC(auipc, x19, -0x10001000, 0xeffff, x6, 16, x8)

inst_5:
// rd==x12, imm_val == 1015807, 
// opcode: auipc ; dest:x12; immval:0xf7fff
TEST_AUIPC(auipc, x12, -0x8001000, 0xf7fff, x6, 20, x8)

inst_6:
// rd==x2, imm_val == 1032191, 
// opcode: auipc ; dest:x2; immval:0xfbfff
TEST_AUIPC(auipc, x2, -0x4001000, 0xfbfff, x6, 24, x8)

inst_7:
// rd==x7, imm_val == 1040383, 
// opcode: auipc ; dest:x7; immval:0xfdfff
TEST_AUIPC(auipc, x7, -0x2001000, 0xfdfff, x6, 28, x8)

inst_8:
// rd==x23, imm_val == 1044479, 
// opcode: auipc ; dest:x23; immval:0xfefff
TEST_AUIPC(auipc, x23, -0x1001000, 0xfefff, x6, 32, x8)

inst_9:
// rd==x13, imm_val == 1046527, 
// opcode: auipc ; dest:x13; immval:0xff7ff
TEST_AUIPC(auipc, x13, -0x801000, 0xff7ff, x6, 36, x8)

inst_10:
// rd==x11, imm_val == 1047551, 
// opcode: auipc ; dest:x11; immval:0xffbff
TEST_AUIPC(auipc, x11, -0x401000, 0xffbff, x6, 40, x8)

inst_11:
// rd==x15, imm_val == 1048063, 
// opcode: auipc ; dest:x15; immval:0xffdff
TEST_AUIPC(auipc, x15, -0x201000, 0xffdff, x6, 44, x8)

inst_12:
// rd==x21, imm_val == 1048319, 
// opcode: auipc ; dest:x21; immval:0xffeff
TEST_AUIPC(auipc, x21, -0x101000, 0xffeff, x6, 48, x8)

inst_13:
// rd==x25, imm_val == 1048447, 
// opcode: auipc ; dest:x25; immval:0xfff7f
TEST_AUIPC(auipc, x25, -0x81000, 0xfff7f, x6, 52, x8)

inst_14:
// rd==x5, imm_val == 1048511, 
// opcode: auipc ; dest:x5; immval:0xfffbf
TEST_AUIPC(auipc, x5, -0x41000, 0xfffbf, x6, 56, x8)

inst_15:
// rd==x27, imm_val == 1048543, 
// opcode: auipc ; dest:x27; immval:0xfffdf
TEST_AUIPC(auipc, x27, -0x21000, 0xfffdf, x6, 60, x8)

inst_16:
// rd==x28, imm_val == 1048559, 
// opcode: auipc ; dest:x28; immval:0xfffef
TEST_AUIPC(auipc, x28, -0x11000, 0xfffef, x6, 64, x8)

inst_17:
// rd==x20, imm_val == 1048567, 
// opcode: auipc ; dest:x20; immval:0xffff7
TEST_AUIPC(auipc, x20, -0x9000, 0xffff7, x6, 68, x8)

inst_18:
// rd==x17, imm_val == 1048571, 
// opcode: auipc ; dest:x17; immval:0xffffb
TEST_AUIPC(auipc, x17, -0x5000, 0xffffb, x6, 72, x8)

inst_19:
// rd==x29, imm_val == 1048573, 
// opcode: auipc ; dest:x29; immval:0xffffd
TEST_AUIPC(auipc, x29, -0x3000, 0xffffd, x6, 76, x8)

inst_20:
// rd==x22, imm_val == 1048574, 
// opcode: auipc ; dest:x22; immval:0xffffe
TEST_AUIPC(auipc, x22, -0x2000, 0xffffe, x6, 80, x8)

inst_21:
// rd==x1, imm_val == 524288, 
// opcode: auipc ; dest:x1; immval:0x80000
TEST_AUIPC(auipc, x1, -0x80000000, 0x80000, x6, 84, x8)

inst_22:
// rd==x24, imm_val == 262144, 
// opcode: auipc ; dest:x24; immval:0x40000
TEST_AUIPC(auipc, x24, 0x40000000, 0x40000, x6, 88, x8)

inst_23:
// rd==x30, imm_val == 131072, 
// opcode: auipc ; dest:x30; immval:0x20000
TEST_AUIPC(auipc, x30, 0x20000000, 0x20000, x6, 92, x8)

inst_24:
// rd==x31, imm_val == 65536, 
// opcode: auipc ; dest:x31; immval:0x10000
TEST_AUIPC(auipc, x31, 0x10000000, 0x10000, x6, 96, x8)

inst_25:
// rd==x0, imm_val == 32768, 
// opcode: auipc ; dest:x0; immval:0x8000
TEST_AUIPC(auipc, x0, 0, 0x8000, x6, 100, x8)

inst_26:
// rd==x9, imm_val == 16384, 
// opcode: auipc ; dest:x9; immval:0x4000
TEST_AUIPC(auipc, x9, 0x4000000, 0x4000, x6, 104, x8)

inst_27:
// rd==x4, imm_val == 8192, 
// opcode: auipc ; dest:x4; immval:0x2000
TEST_AUIPC(auipc, x4, 0x2000000, 0x2000, x6, 108, x8)

inst_28:
// rd==x18, imm_val == 4096, 
// opcode: auipc ; dest:x18; immval:0x1000
TEST_AUIPC(auipc, x18, 0x1000000, 0x1000, x6, 112, x2)
RVTEST_SIGBASE( x1,signature_x1_0)

inst_29:
// rd==x6, imm_val == 2048, 
// opcode: auipc ; dest:x6; immval:0x800
TEST_AUIPC(auipc, x6, 0x800000, 0x800, x1, 0, x2)

inst_30:
// rd==x8, imm_val == 1024, imm_val==1024
// opcode: auipc ; dest:x8; immval:0x400
TEST_AUIPC(auipc, x8, 0x400000, 0x400, x1, 4, x2)

inst_31:
// rd==x26, imm_val == 512, 
// opcode: auipc ; dest:x26; immval:0x200
TEST_AUIPC(auipc, x26, 0x200000, 0x200, x1, 8, x2)

inst_32:
// imm_val == 256, 
// opcode: auipc ; dest:x10; immval:0x100
TEST_AUIPC(auipc, x10, 0x100000, 0x100, x1, 12, x2)

inst_33:
// imm_val == 128, 
// opcode: auipc ; dest:x10; immval:0x80
TEST_AUIPC(auipc, x10, 0x80000, 0x80, x1, 16, x2)

inst_34:
// imm_val == 64, 
// opcode: auipc ; dest:x10; immval:0x40
TEST_AUIPC(auipc, x10, 0x40000, 0x40, x1, 20, x2)

inst_35:
// imm_val == 32, 
// opcode: auipc ; dest:x10; immval:0x20
TEST_AUIPC(auipc, x10, 0x20000, 0x20, x1, 24, x2)

inst_36:
// imm_val == 16, 
// opcode: auipc ; dest:x10; immval:0x10
TEST_AUIPC(auipc, x10, 0x10000, 0x10, x1, 28, x2)

inst_37:
// imm_val==349525, imm_val == 349525
// opcode: auipc ; dest:x10; immval:0x55555
TEST_AUIPC(auipc, x10, 0x55555000, 0x55555, x1, 32, x2)

inst_38:
// imm_val==3, 
// opcode: auipc ; dest:x10; immval:0x3
TEST_AUIPC(auipc, x10, 0x3000, 0x3, x1, 36, x2)

inst_39:
// imm_val == 699050, imm_val==699050
// opcode: auipc ; dest:x10; immval:0xaaaaa
TEST_AUIPC(auipc, x10, -0x55556000, 0xaaaaa, x1, 40, x2)

inst_40:
// imm_val == 0, imm_val==0
// opcode: auipc ; dest:x10; immval:0x0
TEST_AUIPC(auipc, x10, 0x0, 0x0, x1, 44, x2)

inst_41:
// imm_val == 8, 
// opcode: auipc ; dest:x10; immval:0x8
TEST_AUIPC(auipc, x10, 0x8000, 0x8, x1, 48, x2)

inst_42:
// imm_val == 4, imm_val==4
// opcode: auipc ; dest:x10; immval:0x4
TEST_AUIPC(auipc, x10, 0x4000, 0x4, x1, 52, x2)

inst_43:
// imm_val == 2, imm_val==2
// opcode: auipc ; dest:x10; immval:0x2
TEST_AUIPC(auipc, x10, 0x2000, 0x2, x1, 56, x2)

inst_44:
// imm_val == 1, imm_val==1
// opcode: auipc ; dest:x10; immval:0x1
TEST_AUIPC(auipc, x10, 0x1000, 0x1, x1, 60, x2)

inst_45:
// imm_val==725, 
// opcode: auipc ; dest:x10; immval:0x2d5
TEST_AUIPC(auipc, x10, 0x2d5000, 0x2d5, x1, 64, x2)

inst_46:
// imm_val==419431, 
// opcode: auipc ; dest:x10; immval:0x66667
TEST_AUIPC(auipc, x10, 0x66667000, 0x66667, x1, 68, x2)

inst_47:
// imm_val==209716, 
// opcode: auipc ; dest:x10; immval:0x33334
TEST_AUIPC(auipc, x10, 0x33334000, 0x33334, x1, 72, x2)

inst_48:
// imm_val==6, 
// opcode: auipc ; dest:x10; immval:0x6
TEST_AUIPC(auipc, x10, 0x6000, 0x6, x1, 76, x2)

inst_49:
// imm_val==699051, 
// opcode: auipc ; dest:x10; immval:0xaaaab
TEST_AUIPC(auipc, x10, -0x55555000, 0xaaaab, x1, 80, x2)

inst_50:
// imm_val==349526, 
// opcode: auipc ; dest:x10; immval:0x55556
TEST_AUIPC(auipc, x10, 0x55556000, 0x55556, x1, 84, x2)

inst_51:
// imm_val==1022, 
// opcode: auipc ; dest:x10; immval:0x3fe
TEST_AUIPC(auipc, x10, 0x3fe000, 0x3fe, x1, 88, x2)

inst_52:
// imm_val==723, 
// opcode: auipc ; dest:x10; immval:0x2d3
TEST_AUIPC(auipc, x10, 0x2d3000, 0x2d3, x1, 92, x2)

inst_53:
// imm_val==419429, 
// opcode: auipc ; dest:x10; immval:0x66665
TEST_AUIPC(auipc, x10, 0x66665000, 0x66665, x1, 96, x2)

inst_54:
// imm_val==209714, 
// opcode: auipc ; dest:x10; immval:0x33332
TEST_AUIPC(auipc, x10, 0x33332000, 0x33332, x1, 100, x2)

inst_55:
// imm_val==699049, 
// opcode: auipc ; dest:x10; immval:0xaaaa9
TEST_AUIPC(auipc, x10, -0x55557000, 0xaaaa9, x1, 104, x2)

inst_56:
// imm_val==349524, 
// opcode: auipc ; dest:x10; immval:0x55554
TEST_AUIPC(auipc, x10, 0x55554000, 0x55554, x1, 108, x2)

inst_57:
// imm_val==1023, 
// opcode: auipc ; dest:x10; immval:0x3ff
TEST_AUIPC(auipc, x10, 0x3ff000, 0x3ff, x1, 112, x2)

inst_58:
// imm_val==724, 
// opcode: auipc ; dest:x10; immval:0x2d4
TEST_AUIPC(auipc, x10, 0x2d4000, 0x2d4, x1, 116, x2)

inst_59:
// imm_val==419430, 
// opcode: auipc ; dest:x10; immval:0x66666
TEST_AUIPC(auipc, x10, 0x66666000, 0x66666, x1, 120, x2)

inst_60:
// imm_val==209715, 
// opcode: auipc ; dest:x10; immval:0x33333
TEST_AUIPC(auipc, x10, 0x33333000, 0x33333, x1, 124, x2)

inst_61:
// imm_val==5, 
// opcode: auipc ; dest:x10; immval:0x5
TEST_AUIPC(auipc, x10, 0x5000, 0x5, x1, 128, x2)

inst_62:
// imm_val == 32768, 
// opcode: auipc ; dest:x10; immval:0x8000
TEST_AUIPC(auipc, x10, 0x8000000, 0x8000, x1, 132, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 29*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
